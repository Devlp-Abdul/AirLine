{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class MatchPasswordService {\n  constructor() {}\n  matchPassword(password, confirmPassword) {\n    return formGroup => {\n      const passwordControl = formGroup.get(password);\n      const confirmPasswordControl = formGroup.get(confirmPassword);\n      if (!passwordControl || !confirmPasswordControl) {\n        return null;\n      }\n      if (confirmPasswordControl.errors && !confirmPasswordControl.errors[\"passwordMismatch\"]) {\n        return null;\n      }\n      if (passwordControl.value !== confirmPasswordControl.value) {\n        confirmPasswordControl.setErrors({\n          passwordMismatch: true\n        });\n        return {\n          passwordMismatch: true\n        };\n      } else {\n        confirmPasswordControl.setErrors(null);\n        return null;\n      }\n    };\n  }\n}\nMatchPasswordService.ɵfac = function MatchPasswordService_Factory(t) {\n  return new (t || MatchPasswordService)();\n};\nMatchPasswordService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MatchPasswordService,\n  factory: MatchPasswordService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,oBAAoB;EAE/BC,eAAgB;EAEhBC,aAAa,CAACC,QAAgB,EAAEC,eAAuB;IACrD,OAAQC,SAA0B,IAA6B;MAC7D,MAAMC,eAAe,GAAGD,SAAS,CAACE,GAAG,CAACJ,QAAQ,CAAC;MAC/C,MAAMK,sBAAsB,GAAGH,SAAS,CAACE,GAAG,CAACH,eAAe,CAAC;MAE7D,IAAI,CAACE,eAAe,IAAI,CAACE,sBAAsB,EAAE;QAC/C,OAAO,IAAI;;MAGb,IACEA,sBAAsB,CAACC,MAAM,IAC7B,CAACD,sBAAsB,CAACC,MAAM,CAAC,kBAAkB,CAAC,EAClD;QACA,OAAO,IAAI;;MAGb,IAAIH,eAAe,CAACI,KAAK,KAAKF,sBAAsB,CAACE,KAAK,EAAE;QAC1DF,sBAAsB,CAACG,SAAS,CAAC;UAAEC,gBAAgB,EAAE;QAAI,CAAE,CAAC;QAC5D,OAAO;UAAEA,gBAAgB,EAAE;QAAI,CAAE;OAClC,MAAM;QACLJ,sBAAsB,CAACG,SAAS,CAAC,IAAI,CAAC;QACtC,OAAO,IAAI;;IAEf,CAAC;EACH;;AA5BWX,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAa,SAApBb,oBAAoB;EAAAc,YAFnB;AAAM","names":["MatchPasswordService","constructor","matchPassword","password","confirmPassword","formGroup","passwordControl","get","confirmPasswordControl","errors","value","setErrors","passwordMismatch","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Abdul.B\\Desktop\\Today\\src\\app\\services\\match-password.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MatchPasswordService {\n\n  constructor() { }\n\n  matchPassword(password: string, confirmPassword: string) {\n    return (formGroup: AbstractControl): ValidationErrors | null => {\n      const passwordControl = formGroup.get(password);\n      const confirmPasswordControl = formGroup.get(confirmPassword);\n\n      if (!passwordControl || !confirmPasswordControl) {\n        return null;\n      }\n\n      if (\n        confirmPasswordControl.errors &&\n        !confirmPasswordControl.errors[\"passwordMismatch\"]\n      ) {\n        return null;\n      }\n\n      if (passwordControl.value !== confirmPasswordControl.value) {\n        confirmPasswordControl.setErrors({ passwordMismatch: true });\n        return { passwordMismatch: true };\n      } else {\n        confirmPasswordControl.setErrors(null);\n        return null;\n      }\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}